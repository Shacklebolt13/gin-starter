// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"gin-starter/internal/controller"
	"gin-starter/internal/controller/health"
	"gin-starter/internal/service/integration/amazon/cognito"
	"gin-starter/internal/service/integration/amazon/cognito/usecase/user/create"
	"gin-starter/internal/service/integration/amazon/cognito/usecase/user/login"
	"gin-starter/internal/singleton/config"
	"gin-starter/internal/singleton/integration"
	"gin-starter/internal/singleton/integration/amazon"
	"github.com/google/wire"
)

// Injectors from wire.go:

func ProvideHealthController() (health.HealthController, error) {
	healthController := health.NewHealthController()
	return healthController, nil
}

func ProvideUrlMappings() controller.UrlMapping {
	healthController := health.NewHealthController()
	urlMapping := controller.NewUrlMapping(healthController)
	return urlMapping
}

func ProvideAppConfig() (*config.AppConfig, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig, err := config.NewProcessConfig(envConfig)
	if err != nil {
		return nil, err
	}
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	return appConfig, nil
}

func ProvideIntegrationConfig() (*integration.ExternalClients, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig, err := config.NewProcessConfig(envConfig)
	if err != nil {
		return nil, err
	}
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	client := amazon.NewDynamoDBClient(appConfig)
	cognitoidentityproviderClient := amazon.NewCidpClient(appConfig)
	amazonIntegration := amazon.NewAmazonIntegration(client, cognitoidentityproviderClient)
	externalClients, err := integration.NewIntegration(amazonIntegration)
	if err != nil {
		return nil, err
	}
	return externalClients, nil
}

func ProvideCognitoService() (*cognito.CognitoService, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig, err := config.NewProcessConfig(envConfig)
	if err != nil {
		return nil, err
	}
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	client := amazon.NewCidpClient(appConfig)
	createUserService := create.NewCreateUserService(client, appConfig, awsConfig)
	loginService := login.NewLoginService(client)
	cognitoService, err := cognito.NewCognitoService(createUserService, loginService)
	if err != nil {
		return nil, err
	}
	return cognitoService, nil
}

// wire.go:

var configSet = wire.NewSet(config.ParseEnvironment, config.ConfigureAws, config.NewProcessConfig, config.NewAppConfig)

var integrationConfigSet = wire.NewSet(amazon.NewDynamoDBClient, amazon.NewCidpClient, amazon.NewAmazonIntegration, integration.NewIntegration)

var cognitoSet = wire.NewSet(login.NewLoginService, create.NewCreateUserService, cognito.NewCognitoService)

var healthControllerSet = wire.NewSet(health.NewHealthController)

var controllerSet = wire.NewSet(
	healthControllerSet, controller.NewUrlMapping,
)
