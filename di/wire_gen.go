// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"gin-starter/internal/controller"
	"gin-starter/internal/controller/health"
	"gin-starter/internal/controller/user"
	"gin-starter/internal/database/sql"
	"gin-starter/internal/database/sql/repo"
	user2 "gin-starter/internal/service/app/user"
	create2 "gin-starter/internal/service/app/user/create"
	login2 "gin-starter/internal/service/app/user/login"
	"gin-starter/internal/service/integration/amazon/cognito"
	"gin-starter/internal/service/integration/amazon/cognito/usecase/user/create"
	"gin-starter/internal/service/integration/amazon/cognito/usecase/user/login"
	"gin-starter/internal/singleton/config"
	"gin-starter/internal/singleton/integration"
	"gin-starter/internal/singleton/integration/amazon"
	"github.com/google/wire"
)

// Injectors from wire.go:

func ProvideHealthController() (health.HealthController, error) {
	healthController := health.NewHealthController()
	return healthController, nil
}

func ProvideUserController() (user.UserController, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig := config.NewProcessConfig(envConfig)
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	client := amazon.NewCidpClient(appConfig)
	createUserService := create.NewCreateUserService(client, appConfig, awsConfig)
	loginService := login.NewLoginService(client, appConfig)
	cognitoService := cognito.NewCognitoService(createUserService, loginService)
	db := sql.ConnectDb(appConfig)
	userRepository := repo.NewUserRepository(db)
	createCreateUserService := create2.NewCreateUserService(cognitoService, userRepository)
	loginUserService := login2.NewLoginUserService(cognitoService, userRepository)
	userService := user2.NewUserService(createCreateUserService, loginUserService)
	userController := user.NewUserController(userService)
	return userController, nil
}

func ProvideUrlMappings() controller.UrlMapping {
	healthController := health.NewHealthController()
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig := config.NewProcessConfig(envConfig)
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	client := amazon.NewCidpClient(appConfig)
	createUserService := create.NewCreateUserService(client, appConfig, awsConfig)
	loginService := login.NewLoginService(client, appConfig)
	cognitoService := cognito.NewCognitoService(createUserService, loginService)
	db := sql.ConnectDb(appConfig)
	userRepository := repo.NewUserRepository(db)
	createCreateUserService := create2.NewCreateUserService(cognitoService, userRepository)
	loginUserService := login2.NewLoginUserService(cognitoService, userRepository)
	userService := user2.NewUserService(createCreateUserService, loginUserService)
	userController := user.NewUserController(userService)
	urlMapping := controller.NewUrlMapping(healthController, userController)
	return urlMapping
}

func ProvideAppConfig() (*config.AppConfig, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig := config.NewProcessConfig(envConfig)
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	return appConfig, nil
}

func ProvideIntegrationConfig() (*integration.ExternalClients, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig := config.NewProcessConfig(envConfig)
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	client := amazon.NewDynamoDBClient(appConfig)
	cognitoidentityproviderClient := amazon.NewCidpClient(appConfig)
	amazonIntegration := amazon.NewAmazonIntegration(client, cognitoidentityproviderClient)
	externalClients := integration.NewIntegration(amazonIntegration)
	return externalClients, nil
}

func ProvideCognitoService() (*cognito.CognitoService, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig := config.NewProcessConfig(envConfig)
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	client := amazon.NewCidpClient(appConfig)
	createUserService := create.NewCreateUserService(client, appConfig, awsConfig)
	loginService := login.NewLoginService(client, appConfig)
	cognitoService := cognito.NewCognitoService(createUserService, loginService)
	return cognitoService, nil
}

func ProvideUserService() (*user2.UserService, error) {
	envConfig := config.ParseEnvironment()
	awsConfig := config.ConfigureAws()
	processConfig := config.NewProcessConfig(envConfig)
	appConfig := config.NewAppConfig(envConfig, awsConfig, processConfig)
	client := amazon.NewCidpClient(appConfig)
	createUserService := create.NewCreateUserService(client, appConfig, awsConfig)
	loginService := login.NewLoginService(client, appConfig)
	cognitoService := cognito.NewCognitoService(createUserService, loginService)
	db := sql.ConnectDb(appConfig)
	userRepository := repo.NewUserRepository(db)
	createCreateUserService := create2.NewCreateUserService(cognitoService, userRepository)
	loginUserService := login2.NewLoginUserService(cognitoService, userRepository)
	userService := user2.NewUserService(createCreateUserService, loginUserService)
	return userService, nil
}

// wire.go:

var configSet = wire.NewSet(config.ParseEnvironment, config.ConfigureAws, config.NewProcessConfig, config.NewAppConfig)

var integrationConfigSet = wire.NewSet(amazon.NewDynamoDBClient, amazon.NewCidpClient, amazon.NewAmazonIntegration, integration.NewIntegration)

var databaseSet = wire.NewSet(sql.ConnectDb, repo.NewUserRepository)

var userServiceSet = wire.NewSet(create2.NewCreateUserService, login2.NewLoginUserService, user2.NewUserService)

var cognitoSet = wire.NewSet(login.NewLoginService, create.NewCreateUserService, cognito.NewCognitoService)

var controllerSet = wire.NewSet(health.NewHealthController, user.NewUserController, controller.NewUrlMapping)

var megaSet = wire.NewSet(
	configSet,
	integrationConfigSet,
	databaseSet,
	userServiceSet,
	cognitoSet,
	controllerSet,
)
